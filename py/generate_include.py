#---------------------------------------------------------------#
# generate_include.py - v 0.3                                   #
# The file aims to create ./inc/instruction_length.h file.      #
# The instruction_length.h file contains all the instruction    #
# lengths used to decode Z80 instruction.                       #
# The original values are stored into an ODS file located in    #
# the /docs directory (Z80_instruction_length.ods).             #
# To generate the CSV file, open the ODS file and save as it as #
# a CSV file. ';' is the separator and use '"' as a string      #
# separator.                                                    #
# To generate the .h file, just lanch this Python file and the  #
# inc/instruction_length.h file will be created in the inc      #
# directory. Do that only once if needed. That's all.           # 
#---------------------------------------------------------------#

import csv
import more_itertools as mit

# Some constants
NB_OF_ELEMENTS      = 17
INDICE_DEC          = 0
INDICE_HEXA         = 1
POS_OF_NATURAL_CODE = 3
POS_OF_CB_CODE      = 5
POS_OF_ED_CODE      = 7 
POS_OF_DD_CODE      = 9
POS_OF_FD_CODE      = 11
POS_OF_DDCB_CODE    = 13
POS_OF_FDCB_CODE    = 15

# Open the result file and add header
result=open("./inc/instruction_length.h", "w")
result.write("/**********************************************************/\n")
result.write("/* Z80 instructions length header file                    */\n")
result.write("/* This file is generated by the generate_include.py file */\n")
result.write("/* Please, don't modify it.                               */\n")
result.write("/**********************************************************/\n")
result.write("\n")
result.write("#ifndef INSTRUCTION_LENGTH_H\n")
result.write("#define INSTRUCTION_LENGTH_H\n\n")

with open('docs/Z80_Instruction_length.csv', newline='') as csvfile:
    spamreader = csv.reader(csvfile, delimiter=';', quotechar='"')
    iterable = mit.seekable(spamreader)

    # Add the natural size #define into the file
    for row in iterable:
        for i in range(NB_OF_ELEMENTS):
            if (row[i]==''):
                row[i]='0'

        if row[INDICE_DEC]!='Dec':
            result.write("#define LENGTH_NATURAL_")

            if int(row[INDICE_DEC]) < 16:
                result.write("0")

            result.write(row[INDICE_HEXA] + "\t\t" + "(" + row[POS_OF_NATURAL_CODE] +")" + '\n')
    
    result.write("\n")
    iterable.seek(0)
    
    # Add the CB size #define into the file
    for row in iterable:
        for i in range(NB_OF_ELEMENTS):
            if (row[i]==''):
                row[i]='0'

        if row[INDICE_DEC]!='Dec':
            result.write("#define LENGTH_CB_")

            if int(row[INDICE_DEC]) < 16:
                result.write("0")

            result.write(row[INDICE_HEXA] + "\t\t\t" + "(" + row[POS_OF_CB_CODE] +")" + '\n')

    result.write("\n")   
    iterable.seek(0)
    
    # Add the ED size #define into the file
    for row in iterable:
        for i in range(NB_OF_ELEMENTS):
            if (row[i]==''):
                row[i]='0'

        if row[INDICE_DEC]!='Dec':
            result.write("#define LENGTH_ED_")

            if int(row[INDICE_DEC]) < 16:
                result.write("0")

            result.write(row[INDICE_HEXA] + "\t\t\t" + "(" + row[POS_OF_ED_CODE] +")" + '\n')

    result.write("\n")
    iterable.seek(0)
    
    # Add the FD size #define into the file
    for row in iterable:
        for i in range(NB_OF_ELEMENTS):
            if (row[i]==''):
                row[i]='0'

        if row[INDICE_DEC]!='Dec':
            result.write("#define LENGTH_FD_")

            if int(row[INDICE_DEC]) < 16:
                result.write("0")

            result.write(row[INDICE_HEXA] + "\t\t\t" + "(" + row[POS_OF_FD_CODE] +")" + '\n')

    result.write("\n")
    iterable.seek(0)
    
    # Add the DDCB size #define into the file
    for row in iterable:
        for i in range(NB_OF_ELEMENTS):
            if (row[i]==''):
                row[i]='0'

        if row[INDICE_DEC]!='Dec':
            result.write("#define LENGTH_DDCB_")

            if int(row[INDICE_DEC]) < 16:
                result.write("0")

            result.write(row[INDICE_HEXA] + "\t\t\t" + "(" + row[POS_OF_DDCB_CODE] +")" + '\n')

    result.write("\n")
    iterable.seek(0)

    # Add the FDCB size #define into the file
    for row in iterable:
        for i in range(NB_OF_ELEMENTS):
            if (row[i]==''):
                row[i]='0'

        if row[INDICE_DEC]!='Dec':
            result.write("#define LENGTH_FDCB_")

            if int(row[INDICE_DEC]) < 16:
                result.write("0")

            result.write(row[INDICE_HEXA] + "\t\t\t" + "(" + row[POS_OF_FDCB_CODE] +")" + '\n')

result.write("\n#endif\n")
result.close()